add_trace(y = ~ mean_budget, name = 'Mean Budget') %>%
add_trace(x = ~ reorder(genres_new, -mean_profit), y = ~ mean_imdb, mode = "lines", name = 'Mean Ratings', yaxis="y2") %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_trace(x = ~ reorder(genres_new, -mean_profit), y = ~ mean_imdb, mode = "lines", name = 'Mean Ratings', yaxis="y2") %>%
add_trace(y = ~ mean_gross, name = 'Mean Gross') %>%
add_trace(y = ~ mean_budget, name = 'Mean Budget') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_trace(x = ~ reorder(genres_new, -mean_profit), y = ~ mean_imdb, mode = "lines", yaxis="y2", name = 'Mean Ratings') %>%
add_trace(y = ~ mean_gross, name = 'Mean Gross') %>%
add_trace(y = ~ mean_budget, name = 'Mean Budget') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_trace(y = ~ mean_imdb, mode = "lines", yaxis="y2", name = 'Mean Ratings') %>%
add_trace(y = ~ mean_gross, name = 'Mean Gross') %>%
add_trace(y = ~ mean_budget, name = 'Mean Budget') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_trace(y = ~ mean_imdb, yaxis="y2", name = 'Mean Ratings') %>%
add_trace(y = ~ mean_gross, name = 'Mean Gross') %>%
add_trace(y = ~ mean_budget, name = 'Mean Budget') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_trace(y = ~ mean_gross, name = 'Mean Gross') %>%
add_trace(y = ~ mean_budget, name = 'Mean Budget') %>%
add_bars(y = ~ mean_imdb, yaxis="y2", name = 'Mean Ratings') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_bars(y = ~ mean_gross, name = 'Mean Gross') %>%
add_bars(y = ~ mean_budget, name = 'Mean Budget') %>%
add_bars(y = ~ mean_imdb, yaxis="y2", name = 'Mean Ratings', offsetgroup = 2) %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_bars(y = ~ mean_gross, name = 'Mean Gross', offsetgroup = 1) %>%
add_bars(y = ~ mean_budget, name = 'Mean Budget', offsetgroup = 1) %>%
add_bars(y = ~ mean_imdb, yaxis="y2", name = 'Mean Ratings', offsetgroup = 1) %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_bars(y = ~ mean_gross, name = 'Mean Gross', offsetgroup = 1) %>%
add_bars(y = ~ mean_budget, name = 'Mean Budget', offsetgroup = 1) %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_bars(y = ~ mean_gross, name = 'Mean Gross') %>%
add_bars(y = ~ mean_budget, name = 'Mean Budget') %>%
add_lines(y = ~ mean_imdb, yaxis="y2", name = 'Mean Ratings') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.align = "center", fig.width = 10)
IMDB.USA.profit %>%
filter(budget > 10) %>%
top_n(30, ROI) %>%
ggplot(aes(
x = budget,
y = ROI
)) +
geom_point(aes(
size = imdb_score,
color = title_year)) +
geom_smooth() +
geom_text_repel(
aes(label = movie_title)
) +
xlab("Budget in Million Dollars") +
ylab("ROI in Pecentage") +
ggtitle("Top 30 Movies with Highest ROI")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, fig.align = "center", fig.width = 10)
library(tidyverse)
library(knitr)
library(plotly)
library(ggrepel)
library(DT)
library(tm)
library(openxlsx)
url <- "https://raw.githubusercontent.com/TimotheusHuang/msds597finalproj/main/movie_metadata.csv"
IMDB <- as_tibble(read.csv(url, stringsAsFactors = FALSE))
dim(IMDB)
colnames(IMDB)
DT::datatable(IMDB %>% top_n(n = 100),
options = list(
# columnDefs = list(list(className = 'dt-center', target = 0)),
autoWidth = TRUE,
pageLength = 5,
lengthMenu = c(5, 10, 15, 20),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#4AA4DE', 'color': '#000'});",
"}"
)
))
IMDB <- IMDB %>%
mutate(movie_title = str_replace_all(movie_title, "\\Ã‚", "")) %>%
mutate(genres_new = str_replace_all(genres, "\\|", " ")) %>%
mutate(plot_keywords_new = str_replace_all(plot_keywords, "\\|", " "))
sum(duplicated(IMDB$movie_title))
IMDB <- IMDB[!duplicated(IMDB$movie_title),]
IMDB %>% select(movie_title, budget, country, gross) %>% arrange(desc(budget))
IMDB.USA <- IMDB %>%
filter(country == "USA") %>%
mutate(profitable = as.factor(ifelse(gross > budget, 1, 0)))
write.xlsx(IMDB.USA, file = "IMDB-USA.xlsx")
IMDB %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols = `color`:`plot_keywords_new`, names_to = "Column Name", values_to = "NA_Count") %>%
arrange(desc(NA_Count))
# map(., ~sum(is.na(.)))
dim(IMDB)
colnames(IMDB)
write.xlsx(IMDB, file = "IMDB-cleaned.xlsx")
sum(complete.cases(IMDB %>% drop_na()))
write.xlsx(IMDB %>% drop_na(), file = "IMDB-complete-only.xlsx")
Var.tab <- tibble(
Name = colnames(IMDB),
Type = sapply(IMDB, typeof),
Description = c(
"Colorization: `Color` or `Black and White`",
"Name of the director",
"Number of Critical Reviews",
"Duration of the movie in Minutes",
"Number of FB Page Likes of Director",
"Number of FB Page Likes of Actor No.3",
"Name of Actor No.2",
"Number of FB Page Likes of Actor No.1",
"Gross Earned in US Dollars",
"Classification: `Action`, `Comedy`, `Drama`, ..., etc.",
"Name of Actor No.1",
"Title of the Movie",
"Number of Voted Users on IMDB",
"Total FB Page Likes of of the Entire Cast",
"Name of Actor No.3",
"Number of the Actors Featured in the Movie Poster",
"Keywords Describing the Plot",
"IMDB Link of the Movie",
"Number of Users who Reviewed the Movie",
"Language of the movie: `English`, `French`, `Chinese`, ..., etc.",
"Country where the Movie was Produced",
"Content rating",
"Budget in US Dollars",
"Year of Release",
"Number of FB Page Likes of Actor No.2",
"IMDB Score on a Scale of 1 to 10",
"Aspect Ratio",
"Number of FB Page Likes of the Film",
"Edited `genres`",
"Edited `plot_keywords`"
# "Flag indicating profitability of the movie (1-profit, 0-loss)"
)
)
knitr::kable(Var.tab, "simple")
genres.dtm <- DocumentTermMatrix(Corpus(VectorSource(IMDB[!is.na(IMDB$genres_new), ]$genres_new)))
genres.dtm
genres.freq <- colSums(as.matrix(genres.dtm))
genres.freq <- tibble(genre = names(genres.freq), count = genres.freq) %>% arrange(desc(count))
genres.freq
genres.freq %>%
plot_ly(
x = ~ reorder(genre, -count),
y = ~ count,
type = "bar"
) %>%
layout(title = "Movie Genre Frequency Distribution", xaxis = list(title = "genre"))
IMDB.USA.genre <- IMDB.USA %>%
drop_na(genres_new, gross, budget, imdb_score) %>%
# select(genres_new, budget, gross) %>%
mutate(profit = gross - budget) %>%
# mutate(n = row_number()) %>%
separate_rows(genres_new, sep = ' ') %>%
group_by(genres_new) %>%
summarise(mean_gross = mean(gross), mean_budget = mean(budget), mean_profit = mean(profit), mean_imdb = mean(imdb_score))
IMDB.USA.genre
IMDB.USA.genre %>%
plot_ly(
x = ~ reorder(genres_new, -mean_profit),
y = ~ mean_profit,
name = 'Mean Profit',
type = 'bar'
) %>%
add_bars(y = ~ mean_gross, name = 'Mean Gross') %>%
add_bars(y = ~ mean_budget, name = 'Mean Budget') %>%
add_lines(y = ~ mean_imdb, yaxis="y2", name = 'Mean Ratings') %>%
layout(title = 'Genre Profitability Breakdown (USA)', xaxis = list(title = 'Genre'), yaxis = list(title = 'US Dollars'), barmode = 'group', yaxis2 = list(overlaying = "y", side = "right"))
IMDB %>%
filter(country != "" || country != "Official" || country != "New Line") %>%
drop_na(country) %>%
group_by(country, title_year) %>%
summarise(Count = n()) %>%
plot_ly(
x = ~ title_year,
y = ~ country,
z = ~ Count,
type = "heatmap"
) %>%
layout(
title = "Number of Movies Produced per Country Through the Years",
xaxis = list(title = "Year"),
yaxis = list(title = "Country")
)
IMDB %>%
filter(country != "" || country != "Official" || country != "New Line") %>%
drop_na(country) %>%
group_by(country, language) %>%
summarise(Count = n()) %>%
plot_ly(
x = ~ language,
y = ~ country,
z = ~ Count,
type = "heatmap"
) %>%
layout(
title = "Number of Films Produced in each Language per Country",
xaxis = list(title = "Language"),
yaxis = list(title = "Country")
)
IMDB.score <- IMDB %>%
drop_na() %>%
select(imdb_score)
summary(IMDB.score)
quantile(IMDB.score$imdb_score, c(.05, .95))
# summary(IMDB[!is.na(IMDB$imdb_score), ]$imdb_score)
IMDB %>%
drop_na(imdb_score) %>%
plot_ly(
x = ~ imdb_score,
type = "histogram",
name = "IMDb Score"
) %>%
add_segments(x = 4.6, xend = 4.6, y = 0, yend = 250, name = "5 Percentile") %>%
add_segments(x = 5.9, xend = 5.9, y = 0, yend = 250, name = "1st Quantile") %>%
add_segments(x = 6.6, xend = 6.6, y = 0, yend = 250, name = "Median") %>%
add_segments(x = 7.2, xend = 7.2, y = 0, yend = 250, name = "3rd Quantile") %>%
add_segments(x = 8.0, xend = 8.0, y = 0, yend = 250, name = "95 Percentile") %>%
layout(
title = "IMDb Score Distribution",
xaxis = list(title = "IMDb Score"),
yaxis = list(title = "Count")
)
IMDB %>%
drop_na(movie_title, imdb_score) %>%
group_by(movie_title) %>%
summarise(avg_imdb = mean(imdb_score)) %>%
arrange(desc(avg_imdb)) %>%
top_n(10, avg_imdb) %>%
plot_ly(
x =  ~ avg_imdb,
y =  ~ reorder(movie_title, avg_imdb),
type = 'bar',
orientation = 'h',
name = "Top 10 Movies with Highest IMDb Score",
marker = list(color = '#00dfad')
) %>%
layout(
xaxis = list(title = "IMDb Score"),
yaxis = list(title = "")
)
IMDB %>%
drop_na(director_name, imdb_score) %>%
group_by(director_name) %>%
summarise(avg_imdb = mean(imdb_score)) %>%
arrange(desc(avg_imdb)) %>%
top_n(10, avg_imdb) %>%
plot_ly(
x =  ~ avg_imdb,
y =  ~ reorder(director_name, avg_imdb),
type = 'bar',
orientation = 'h',
name = "Top 10 Directors with Highest IMDb Score",
marker = list(color = '#00dfad')
) %>%
layout(
xaxis = list(title = "IMDb Score"),
yaxis = list(title = "")
)
IMDB.USA.profit <- IMDB.USA %>%
drop_na(gross, budget) %>%
mutate(gross = gross/10^6, budget = budget/10^6) %>%
mutate(profit = gross - budget) %>%
mutate(ROI = 100*profit/budget)
IMDB.USA.profit %>%
plot_ly(
x = ~ imdb_score,
y = ~ budget,
z = ~ gross,
color = ~ profitable,
size = ~ profit
) %>%
add_markers() %>%
layout(
scene = list(
xaxis = list(title = 'IMDB Score'),
yaxis = list(title = 'Budget (M$)'),
zaxis = list(title = 'Gross (M$)')
),
title = "IMDB Score (x) v.s. Gross (y) v.s. Budget (z)",
showlegend = FALSE
)
P <- IMDB.USA.profit %>%
top_n(30, profit) %>%
ggplot(aes(
x = imdb_score,
y = gross,
size = profit
)) +
geom_point(aes(
color = content_rating)) +
geom_hline(aes(yintercept = median(gross))) +
geom_vline(aes(xintercept = median(imdb_score))) +
xlab("IMDB Score") +
ylab("Gross Earning in Million Dollars") +
ggtitle("Top 30 Profitable Films v.s. IMDB Scores") +
geom_text(
aes(label = movie_title),
nudge_x = 0.25,
nudge_y = 0.25,
check_overlap = T,
size = 3
)
ggplotly(P)
IMDB.USA.profit %>%
select(movie_title, profit, ROI, budget, title_year, imdb_score) %>%
arrange(desc(profit)) %>%
top_n(30, profit) %>%
ggplot(aes(x = budget,
y = profit)) +
geom_point(aes(size = imdb_score,
color = title_year)) +
geom_smooth() +
geom_text_repel(aes(label = movie_title)) +
xlab("Budget in Million Dollars") +
ylab("Profit in Million Dollars") +
ggtitle("Top 30 Most Profitable Movies")
# ggplotly(P)
IMDB.USA.profit %>%
filter(budget > 10) %>%
top_n(30, ROI) %>%
ggplot(aes(
x = budget,
y = ROI
)) +
geom_point(aes(
size = imdb_score,
color = title_year)) +
geom_smooth() +
geom_text_repel(
aes(label = movie_title)
) +
xlab("Budget in Million Dollars") +
ylab("ROI in Pecentage") +
ggtitle("Top 30 Movies with Highest ROI")
IMDB.USA.profit %>%
filter(budget > 50) %>%
top_n(30, ROI) %>%
ggplot(aes(
x = budget,
y = ROI
)) +
geom_point(aes(
size = imdb_score,
color = title_year)) +
geom_smooth() +
geom_text_repel(
aes(label = movie_title)
) +
xlab("Budget in Million Dollars") +
ylab("ROI in Pecentage") +
ggtitle("Top 30 Movies with Highest ROI")
IMDB.USA.profit %>%
filter(budget > 10) %>%
top_n(30, ROI) %>%
ggplot(aes(
x = budget,
y = ROI
)) +
geom_point(aes(
size = imdb_score,
color = title_year)) +
geom_smooth() +
geom_text_repel(
aes(label = movie_title)
) +
xlab("Budget in Million Dollars") +
ylab("ROI in Pecentage") +
ggtitle("Top 30 Movies with Highest ROI")
IMDB %>%
filter(country != "" || country != "Official" || country != "New Line") %>%
drop_na(country) %>%
group_by(country, title_year) %>%
summarise(Count = n()) %>%
plot_ly(
x = ~ title_year,
y = ~ reorder(country, -Count),
z = ~ Count,
type = "heatmap"
) %>%
layout(
title = "Number of Movies Produced per Country Through the Years",
xaxis = list(title = "Year"),
yaxis = list(title = "Country")
)
IMDB %>%
filter(country != "" || country != "Official" || country != "New Line") %>%
drop_na(country) %>%
group_by(country, title_year) %>%
summarise(Count = n()) %>%
plot_ly(
x = ~ title_year,
y = ~ reorder(country, -Count),
z = ~ Count,
type = "heatmap"
) %>%
layout(
title = "Number of Movies Produced per Country Through the Years",
xaxis = list(title = "Year"),
yaxis = list(title = "Country")
)
IMDB %>%
filter(country != "" || country != "Official" || country != "New Line") %>%
drop_na(country) %>%
group_by(country, title_year) %>%
summarise(Count = n()) %>%
plot_ly(
x = ~ title_year,
y = ~ reorder(country, -Count),
z = ~ Count,
type = "heatmap"
) %>%
layout(
title = "Number of Movies Produced per Country Through the Years",
xaxis = list(title = "Year"),
yaxis = list(title = "Country")
)
P <- IMDB.USA.profit %>%
top_n(30, profit) %>%
ggplot(aes(
x = imdb_score,
y = gross,
size = profit
)) +
geom_point() +
# geom_point(aes(
#   color = content_rating)) +
geom_hline(aes(yintercept = median(gross))) +
geom_vline(aes(xintercept = median(imdb_score))) +
xlab("IMDB Score") +
ylab("Gross Earning in Million Dollars") +
ggtitle("Top 30 Profitable Films v.s. IMDB Scores") +
geom_text(
aes(label = movie_title),
nudge_x = 0.25,
nudge_y = 0.25,
check_overlap = T,
size = 3
)
ggplotly(P)
IMDB.score <- IMDB %>%
drop_na() %>%
select(imdb_score)
summary(IMDB.score)
quantile(IMDB.score$imdb_score, c(.1, .9))
# summary(IMDB[!is.na(IMDB$imdb_score), ]$imdb_score)
